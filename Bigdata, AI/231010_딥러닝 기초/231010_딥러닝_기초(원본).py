# -*- coding: utf-8 -*-
"""231010 딥러닝 기초.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pzxabRVXMTrVd9WMnMovXltf0NCa8mv5

## 실습 1 - 텐서플로우로 선형회귀 모델링

x = np.array([2,4,6,8,10])

y = np.array([20,24,37,40,50])

선형회귀모델을 만들고 ‘5’를 넣었을때 값을 예측해보세요.
"""

import tensorflow as tf
tf.__version__

import keras
print(keras.__version__)

import numpy as np
import tensorflow as tf
import keras

#from tensorflow.keras.models import Sequential
#fom tensorflow.keras.layers import Dense

import numpy as np

x_train = np.array([2,4,6,8,10])
y_train = np.array([20,24,37,40,50])

model = tf.keras.models.Sequential() #모델선언

model.add(tf.keras.layers.Dense(100, input_dim = 1, activation = 'linear')) #1차원 #선형회귀
model.add(tf.keras.layers.Dense(1))
model.add(tf.keras.layers.Dense(1, activation = 'sigmoid'))

model.summary()

sgd = tf.keras.optimizers.SGD(learning_rate=0.01)

model.compile(loss = 'mse', optimizer = 'sgd', metrics = ['accuracy'])
model.fit(x_train, y_train, epochs = 10, batch_size = 1)

model.predict([5])

"""## 실습 2 - 텐서플로우로 선형회귀 모델링

x = np.array([[2,0],[4,5],[6,3],[8,5],[10,7]])
y = np.array([20,24,37,40,50])

선형회귀모델을 만들고 ‘[5,7]’를 넣었을때 값을 예측해보세요.
"""

import numpy as np
import tensorflow as tf
import keras

#from tensorflow.keras.models import Sequential
#fom tensorflow.keras.layers import Dense

import numpy as np

x_train = np.array([[2,0],[4,5],[6,3],[8,5],[10,7],[1,0],[3,5],[8,3],[10,5],[19,7]])
y_train = np.array([20,24,37,40,50, 60, 70, 80, 90, 100])

model = tf.keras.models.Sequential() #모델선언

model.add(tf.keras.layers.Dense(1, input_dim = 2, activation = 'linear')) #1차원 #선형회귀
model.add(tf.keras.layers.Dense(1, activation = 'sigmoid'))

model.summary()

sgd = tf.keras.optimizers.SGD(learning_rate=0.08)

model.compile(loss = 'mse', optimizer = 'sgd', metrics = ['accuracy'])
model.fit(x_train, y_train, epochs = 10, batch_size = 1)

model.predict([[5,7]]) #2차원 리스트로 묶어서 넣어주기

"""## 실습 3 - 텐서플로우로 로지스틱회귀 모델링

x = np.array([2,4,6,8,10])

y = np.array([0,0,0,1,1])

로지스틱회귀모델을 만들고 ‘9’을 넣었을때 값을 예측해보세요.
"""

import numpy as np
import tensorflow as tf
import keras


x_train = np.array([2,4,6,8,10])
y_train = np.array([0,0,0,1,1])

model = tf.keras.models.Sequential() #모델선언

model.add(tf.keras.layers.Dense(1, input_dim = 1, activation = 'sigmoid')) #1차원 #선형회귀

model.summary()

sgd = tf.keras.optimizers.SGD(learning_rate=0.01)

model.compile(loss = 'binary_crossentropy', optimizer = 'sgd', metrics = ['accuracy'])
model.fit(x_train, y_train, epochs = 1, batch_size = 1)

model.predict([9]) #2차원 리스트로 묶어서 넣어주기

"""## 실습4. base line 모델을 먼저 만들고, 성능(acc 90%이상)향상 모델을 만들어보세요!

데이터명 : IRSI (붓꽃 데이터)

 데이터설명 : 붓꽃 데이터로, 꽃잎의 각 부분의 너비와 길이등을 측정한 데이터

 샘플수 : 150개

 필드수 : 5개

- sepal_length 꽃받침 길이

- sepal_width 꽃받침 너비

- petal_length 꽃잎 길이

- petal_width 꽃잎 너비

- species 꽃 종류(setosa, versicolor, virginica)
"""

import tensorflow as tf
import tensorflow_datasets as tfds
import pandas as pd
import numpy as np

import seaborn as sns
iris = sns.load_dataset("iris")
iris

train_dataset = tfds.load('iris', split='train[:80%]')
valid_dataset = tfds.load('iris', split='train[80%:]')

def preprocess(data):
    # 코드를 입력하세요
    x = data['features']
    y = data['label']
    y = tf.one_hot(y, 3)
    return x, y

batch_size=10
train_data = train_dataset.map(preprocess).batch(batch_size)
valid_data = valid_dataset.map(preprocess).batch(batch_size)

model = tf.keras.models.Sequential([
    # input_shape는 X의 feature 갯수가 4개 이므로 (4, )로 지정합니다.
    tf.keras.layers.Dense(512, activation='relu', input_shape=(4,)),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    # Classification을 위한 Softmax, 클래스 갯수 = 3개
    tf.keras.layers.Dense(3, activation='softmax'),
])

model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc'])

history = model.fit(train_data,
                    validation_data=(valid_data),
                    epochs=20)

import matplotlib.pyplot as plt
plt.figure(figsize=(12, 9))
plt.plot(np.arange(1, 21), history.history['loss'])
plt.plot(np.arange(1, 21), history.history['val_loss'])
plt.title('Loss / Val Loss', fontsize=20)
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(['loss', 'val_loss'], fontsize=15)
plt.show()

plt.figure(figsize=(12, 9))
plt.plot(np.arange(1, 21), history.history['acc'])
plt.plot(np.arange(1, 21), history.history['val_acc'])
plt.title('Acc / Val Acc', fontsize=20)
plt.xlabel('Epochs')
plt.ylabel('Acc')
plt.legend(['acc', 'val_acc'], fontsize=15)
plt.show()

"""## 실습5. base line 모델을 먼저 만들고, 성능(acc 90%이상)향상 모델을 만들어보세요!

데이터명 : 타이타닉 생존자

데이터 샘플수 : 891개

필드수 : 15개
"""

# <머신러닝 모델을 만들 때의 순서>
# 1. 데이터 셋의 특징을 잘 나타낼 수 있게 전처리를 한다.
# 2. 학습이 제대로 되도록 데이터 셋을 잘 쪼갠다. (Train, Validation, Test)
# 3. 목적과 데이터에 맞는 모델을 생성한다.
# 4. 학습 후 모델의 성능을 평가하고, 성능을 업그레이드한다.

import tensorflow as tf
import tensorflow_datasets as tfds
import pandas as pd
import numpy as np

import seaborn as sns
titanic = sns.load_dataset("titanic")
titanic

train_dataset = tfds.load('titanic', split='train[:80%]')
valid_dataset = tfds.load('titanic', split='train[80%:]')

def preprocess(data):
    # 코드를 입력하세요
    x = data['features']
    y = data['label']
    y = tf.one_hot(y, 3)
    return x, y

batch_size=1
train_data = train_dataset.map(preprocess).batch(batch_size)
valid_data = valid_dataset.map(preprocess).batch(batch_size)

model = tf.keras.models.Sequential([
    # input_shape는 X의 feature 갯수가 4개 이므로 (4, )로 지정합니다.
    tf.keras.layers.Dense(512, activation='relu', input_shape=(4,)),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    # Classification을 위한 Softmax, 클래스 갯수 = 3개
    tf.keras.layers.Dense(3, activation='softmax'),
])

model.summary()